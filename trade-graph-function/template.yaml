AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  trade-graph-function

  Sample SAM Template for trade-graph-function

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Layers:
      - {Ref: LibLayer}
      - {Ref: UtilLayer }



Resources:
  TradeTrackerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Test
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,authorization,,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
        AllowOrigin: "'*'"
        AllowCredentials: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: 'arn:aws:cognito-idp:us-east-1:130240313905:userpool/us-east-1_l0UlD7ehn'
            Identity:
              Header: Authorization

  ######################################################################################################################
  # Simple layer with custom code
  ######################################################################################################################
  UtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: util_layer
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7

  ######################################################################################################################
  # Layer with build capabilities, automatically execute pip install -r requirements.txt -t installing libraries
  ######################################################################################################################
  LibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: lib_layer
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7 # this is where magic happen, sam build command will read requirements.txt file and download libraries


  TradeGraphFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/trade_graph/
      Handler: tradeGraphFunction.handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
        - DynamoDBCrudPolicy:
            TableName: 'cbp-bot-transaction'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /trade-graph/{account-id}
            Method: get
            RestApiId: {Ref: TradeTrackerApi}
            Auth:
              Authorizer: CognitoAuthorizer
              AddDefaultAuthorizerToCorsPreflight: false

  GainLossFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/gain_loss/
      Handler: gainLossFunction.handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - AmazonTimestreamReadOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /account-graph/{account-id}
            Method: get
            RestApiId: {Ref: TradeTrackerApi }
            Auth:
              Authorizer: CognitoAuthorizer

  CBAccountsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/cbp_accounts/
      Handler: cbpAccountsFunction.lambda_handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameters
                - ssm:GetParameter
              Resource:
                - 'arn:aws:ssm:us-east-1:130240313905:parameter/ic-miller/trader-bot/*'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /cbp-accounts
            Method: get
            RestApiId: {Ref: TradeTrackerApi }
            Auth:
              Authorizer: CognitoAuthorizer

  CBPAddAccountFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/cbp_add_account/
      Handler: addAccountFunction.lambda_handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /cbp-accounts/{account-id}
            Method: post
            RestApiId: {Ref: TradeTrackerApi }
            Auth:
              Authorizer: CognitoAuthorizer

  CBPRemoveAccountFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/cbp_remove_account/
      Handler: removeAccountFunction.lambda_handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /cbp-accounts/{account-id}
            Method: delete
            RestApiId: {Ref: TradeTrackerApi }
            Auth:
              Authorizer: CognitoAuthorizer


  AccountsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/accounts/
      Handler: accountsFunction.handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /accounts
            Method: get
            RestApiId: {Ref: TradeTrackerApi }
            Auth:
              Authorizer: CognitoAuthorizer


  TransactionsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/transactions
      Handler: transactionFunction.handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
        - DynamoDBCrudPolicy:
            TableName: 'cbp-bot-transaction'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /transactions/{account-id}
            Method: get
            RestApiId: {Ref: TradeTrackerApi }
            Auth:
              Authorizer: CognitoAuthorizer

  BotDecisionsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function_code/bot_decisions
      Handler: bot_decision_function.handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'trader-account'
        - DynamoDBCrudPolicy:
            TableName: 'cbp-bot-decision'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bot-decisions/{account-id}
            Method: get
            RestApiId: {Ref: TradeTrackerApi }
            Auth:
              Authorizer: CognitoAuthorizer

#Outputs:
#  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#  # Find out more about other implicit resources you can reference within SAM
#  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  HelloWorldApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#  HelloWorldFunction:
#    Description: "Hello World Lambda Function ARN"
#    Value: !GetAtt HelloWorldFunction.Arn
#  HelloWorldFunctionIamRole:
#    Description: "Implicit IAM Role created for Hello World function"
#    Value: !GetAtt HelloWorldFunctionRole.Arn
