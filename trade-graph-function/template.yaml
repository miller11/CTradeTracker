AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  trade-graph-function

  Sample SAM Template for trade-graph-function

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30


Resources:
  TradeTrackerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Test
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,authorization,,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
        AllowOrigin: "'*'"
        AllowCredentials: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: 'arn:aws:cognito-idp:us-east-1:130240313905:userpool/us-east-1_l0UlD7ehn'
            Identity:
              Header: Authorization

  TradeGraphFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: graphing/
      Handler: tradeGraph.handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'cb-mock-account'
        - DynamoDBCrudPolicy:
            TableName: 'cb-bot-transaction'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /trade-graph/{account-id}
            Method: get
            RestApiId: !Ref TradeTrackerApi
            Auth:
              Authorizer: CognitoAuthorizer
              AddDefaultAuthorizerToCorsPreflight: false

  GainLossFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: graphing/
      Handler: gainLoss.handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - AmazonTimestreamReadOnlyAccess
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /account-graph/{account-id}
            Method: get
            RestApiId: !Ref TradeTrackerApi
            Auth:
              Authorizer: CognitoAuthorizer

  AccountsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: accounts/
      Handler: app.accounts_handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'cb-mock-account'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /accounts
            Method: get
            RestApiId: !Ref TradeTrackerApi
            Auth:
              Authorizer: CognitoAuthorizer


  TransactionsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: accounts/
      Handler: app.transactions_handler
      Runtime: python3.7
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: 'cb-mock-account'
        - DynamoDBCrudPolicy:
            TableName: 'cb-bot-transaction'
      Events:
        TradeGraph:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /transactions/{account-id}
            Method: get
            RestApiId: !Ref TradeTrackerApi
            Auth:
              Authorizer: CognitoAuthorizer


#  DynamoReadWritePolicy:
#    Type: "AWS::IAM::ManagedPolicy"
#    Properties:
#      PolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Action:
#              - "dynamodb:BatchGetItem"
#              - "dynamodb:GetItem"
#              - "dynamodb:Query"
#              - "dynamodb:Scan"
#              - "dynamodb:BatchWriteItem"
#              - "dynamodb:PutItem"
#              - "dynamodb:UpdateItem"
#            Effect: "Allow"
#            Resource:
#              - "arn:aws:dynamodb:us-east-1:130240313905:table/cb-mock-account"
#              - "arn:aws:dynamodb:us-east-1:130240313905:table/cb-bot-transaction"
#      Description: "An IAM policy that grants permissions to read/write on Dynamo"

#Outputs:
#  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#  # Find out more about other implicit resources you can reference within SAM
#  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  HelloWorldApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#  HelloWorldFunction:
#    Description: "Hello World Lambda Function ARN"
#    Value: !GetAtt HelloWorldFunction.Arn
#  HelloWorldFunctionIamRole:
#    Description: "Implicit IAM Role created for Hello World function"
#    Value: !GetAtt HelloWorldFunctionRole.Arn
